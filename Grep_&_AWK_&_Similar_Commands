
AWK:-
       
1.  To print the third field of the fifth line:
       # awk -F ":" 'FNR == 5 {print $3}' /etc/passwd 
2.  Typical use
       1. print 1st and 4th column
              # awk '{print $1, $4}' file.txt
       2. same with 'cat file.txt'
              # awk '{print $0}' file.txt
3.  -F: Set input field sparator
       1. print 1st and 4th column separated by ':'
              # awk -F ":" '{print $1, $4}' file.txt 
4.  Pattern matching
       1. print 2nd column when 1st field is precisely 'test'
              # awk '$1 == "test" { print $2 }' file.txt
       2. print 2nd column when 1st field contains 'test'
              # awk '$1 ~ /
              test/ { print $2 }' file.txt-------------------> [vagrant@localhost ~]$ sudo awk -F ":" '$1 == "root"  {print $0}' /etc/passwd
                                                                root:x:0:0:root:/root:/bin/bash
                                                               [vagrant@localhost ~]$ sudo awk -F ":" '$1 == "bin"  {print $0}' /etc/passwd
                                                                bin:x:1:1:bin:/bin:/sbin/nologin
                                                               [vagrant@localhost ~]$ sudo awk -F ":" '$1 == "bin"  {print $0}' /etc/passwd | awk -F ":" 'FNR == 1 {print $1}'
                                                                bin

                                                                             
              
       3. print 2nd column when 1st field DOES NOT contain 'test'
              # awk '$1 !~ /test/ { print $2 }' file.txt
       4. print 2nd column when this record contains 'test'
              # awk '/test/ { print $2 }' file.txt
       5. print 2nd column when this record DOES NOT contain 'test'
              # awk '! /test/ { print $2 }' file.txt
              
5. to print line numbers one after the other
       # awk '{print i + "1"; i++}' file              
       1
       2
       3
6. awk -F ":" '{print i + "1" "--" $1 "--" $7  ; i++}' /etc/passwd 
       output >>     1--root--/bin/bash
                     2--bin--/sbin/nologin
                     3--daemon--/sbin/nologin
                     4--adm--/sbin/nologin
                     5--lp--/sbin/nologin
                     6--sync--/bin/sync
                     7--shutdown--/sbin/shutdown
                     8--halt--/sbin/halt

       
SUBSTR:--
       substr(s, a, b) : it returns b number of chars from string s, starting at position a. The parameter b is optional, in which case it means up to the end of the string.

For instance, consider a file with the following content:

>>>>>>>>>>>>>>>   every good

Let us save this data into a file called data.txt
Then, here are a few case examples:

Shell:-
         COMMAND                              OUTPUT
1. awk '{print substr($1,1,1)}' data.txt   #returns e
2. awk '{print substr($1,3)   }' data.txt   #returns ery
3. awk '{print substr($2,3)   }' data.txt   #returns od
4. awk '{print substr($0,7,2) }' data.txt  #returns go
---------------------------------------------------------------------------------------
GREP:--
1. Get the pid of the process by using grep or you can use -C 
       # ps -ef | -C 'filename'
              or
       # ps aux | grep 'filename'
2. # grep -q "^docker"        
       -q = --quiet, --silent
              Quiet; do not write anything to standard output.  Exit immediately with zero  status
              if  any  match  is  found,
        "^docker"--->    ^ ---->  	Matches the beginning of a line.
--------------------------------------------------------------------------------------- 


========= Tips & Tricks =========
1.return error code such that 
       # cut -d: -f 1 /etc/group | grep -q "^http" ; let x=$? ; echo $x 

